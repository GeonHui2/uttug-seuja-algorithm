package com.example.codingtest.dfs;

import java.util.Scanner;

public class Baek1012 {

    static int[][] arr;
    static boolean[][] visited;

    static int m,n,k;

    static int result;

    static int[] dx = {1,-1,0,0};
    static int[] dy = {0,0,1,-1};



    public static void main(String[] args) {

        // 아이디어
        // 2중 포문을 돌면서 visited[][] ==false && arr[][] == 1 일 때 dfs를 돌면서 한 노드가 dfs가 모두 절료 되였을 때 종료 시킨다.

        // 시간 복잡도
        //

        Scanner sc = new Scanner(System.in);

        int tc = sc.nextInt();

        for(int test = 0; test < tc; test++){

            m = sc.nextInt();
            n = sc.nextInt();
            k = sc.nextInt();
            result = 0;

            arr = new int[m][n];
            visited = new boolean[m][n];

            for(int i=0; i<k; i++){

                int c = sc.nextInt();
                int l = sc.nextInt();

                arr[c][l] = 1;

            }
            

            for(int i=0; i<m; i++){
                for(int j=0; j<n; j++){

                    if(arr[i][j] == 1 && !visited[i][j]){
                        visited[i][j] = true;
                        result++;
                        dfs(i,j);


                    }

                }
            }

            System.out.println(result);

        }





    }

    public static void dfs(int x ,int y){

        for(int i=0; i<4; i++){

            int nx = x+dx[i];
            int ny = y+dy[i];

            if (nx<m && nx>=0 && ny<n && ny>=0){
                if(arr[nx][ny]==1 && !visited[nx][ny]){
                    visited[nx][ny] = true;
                    dfs(nx,ny);
                }
            }
        }

    }
}
